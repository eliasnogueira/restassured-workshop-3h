{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"REST Assured Hands-on Lab","text":"<p>Thank you for being here! I promise that this 3h workshop won't be boring!</p> Download the slides <p> Build robust API tests with RestAssured</p>"},{"location":"#how-will-the-dynamic","title":"How will the dynamic","text":"<p>This workshop will be conducted as:</p> <ul> <li>presentation (slides) about what we will learn</li> <li>hands-on labs, timeboxed, to create the solutions</li> <li>double-check the code created</li> </ul> <p>Do</p> <ul> <li>Ask questions, we have one rule: there's no silly/stupid question</li> <li>Interact at any time: you don't need to wait until a full explanation to say something</li> <li>Ask for help when you need it: this is the facilitator's work</li> <li>If you feel comfortable, help the person sit on your side</li> </ul> <p>Don't</p> <ul> <li>Don't leave this session without giving feedback, constructive or positive</li> <li>Don't hesitate to reach me out after the session with questions</li> </ul>"},{"location":"better-architecture/lab1/","title":"Better architecture - Lab 1","text":""},{"location":"better-architecture/lab1/#1-create-the-restapiclientbuilder-class","title":"1. Create the <code>RestApiClientBuilder</code> class","text":""},{"location":"better-architecture/lab1/#steps","title":"Steps","text":"<ol> <li>In the <code>com.workshop</code> package create a Java class named <code>RestApiClientBuilder</code> </li> <li>Add the following code inside it     <pre><code>import io.restassured.builder.RequestSpecBuilder;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\npublic class RestApiClientBuilder {\npublic &lt;T&gt; T build(Function&lt;Supplier&lt;RequestSpecBuilder&gt;, T&gt; clientCreator) {\nSupplier&lt;RequestSpecBuilder&gt; requestSpecBuilderSupplier = () -&gt; new RequestSpecBuilder()\n.addRequestSpecification(\nnew RequestSpecBuilder()\n.setBaseUri(\"http://localhost\")\n.setPort(8088)\n.build());\nreturn clientCreator.apply(requestSpecBuilderSupplier);\n}\n}\n</code></pre></li> </ol>"},{"location":"better-architecture/lab1/#expected-results","title":"Expected results","text":"<ul> <li><code>RestApiClientBuilder</code> class created... don't panic, we will use it later!</li> </ul>"},{"location":"better-architecture/lab1/#2-create-the-restrictionapiclient-class","title":"2. Create the <code>RestrictionApiClient</code> class","text":""},{"location":"better-architecture/lab1/#steps_1","title":"Steps","text":"<ol> <li>In the <code>com.workshop</code> package in the <code>src/main/java</code> folder, create a package called <code>api.client</code></li> <li>Create a Java class named <code>RestrictionsApiClient</code> in the <code>com.workshop.api.client</code> package</li> <li>Add the following code inside it     <pre><code>import com.eliasnogueira.credit.api.RestrictionsApi;\nimport io.restassured.response.Response;\nimport com.workshop.api.RestApiClientBuilder;\nimport java.util.function.Function;\npublic class RestrictionsApiClient {\nprivate RestrictionsApi restrictionsApi = new RestApiClientBuilder().build(RestrictionsApi::restrictions);\npublic Response queryCpf(String cpf) {\nreturn restrictionsApi.oneUsingGET().cpfPath(cpf).execute(Function.identity());\n}\n}\n</code></pre></li> </ol>"},{"location":"better-architecture/lab1/#expected-results_1","title":"Expected results","text":"<ul> <li><code>RestrictionsApiClient</code> class created... don't panic, we will use it later!</li> </ul>"},{"location":"better-architecture/lab1/#3-create-the-restrictionapiservice-class","title":"3. Create the <code>RestrictionApiService</code> class","text":""},{"location":"better-architecture/lab1/#steps_2","title":"Steps","text":"<ol> <li>In the <code>com.workshop</code> package in the <code>src/main/java</code> folder, create a package called <code>api.service</code></li> <li>Create a Java class named <code>RestrictionsApiService</code> in the <code>com.workshop.api.service</code> package</li> <li>Add the following code inside it     <pre><code>import com.eliasnogueira.credit.model.MessageV1;\nimport org.apache.http.HttpStatus;\nimport com.workshop.api.client.RestrictionsApiClient;\npublic class RestrictionsApiService {\nprivate RestrictionsApiClient restrictionsApiClient = new RestrictionsApiClient();\n/**\n    * Query CPF without a restriction\n    */\npublic boolean queryCpf(String cpf) {\nrestrictionsApiClient.queryCpf(cpf).then().statusCode(HttpStatus.SC_NOT_FOUND);\nreturn true;\n}\npublic MessageV1 queryCpfWithRestriction(String cpf) {\nreturn restrictionsApiClient.queryCpf(cpf).then().\nstatusCode(HttpStatus.SC_OK).extract().as(MessageV1.class);\n}\n}\n</code></pre></li> </ol>"},{"location":"better-architecture/lab1/#expected-results_2","title":"Expected results","text":"<ul> <li><code>RestrictionsApiService</code> class created... don't panic, we will use it later!</li> </ul>"},{"location":"better-architecture/lab2/","title":"Better architecture - Lab 2","text":""},{"location":"better-architecture/lab2/#1-changing-the-restrictionstest-shouldquerycpfwithoutrestriction-test","title":"1. Changing the  <code>RestrictionsTest</code> - <code>shouldQueryCpfWithoutRestriction()</code> test","text":"<ol> <li>Open the <code>RestrictionsTest</code> located in the <code>com.workshop.restriction</code> package in the <code>src/test/java</code> folder</li> <li>Remove the inheritance of the <code>BaseApiConfiguration</code></li> <li>Comment the current code created in the <code>shouldQueryCpfWithoutRestriction()</code> test</li> <li>Create a <code>RestrictionsApiService</code> within the name <code>restrictionsService</code></li> <li>Call the method <code>restrictionsService.queryCpf()</code>, using any CPF (without a restriction)</li> <li>Associate its response to a boolean</li> <li>Add an assertion using the <code>isTrue()</code> method from AssertJ</li> <li>Run the test</li> </ol>"},{"location":"better-architecture/lab2/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"better-architecture/lab2/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldQueryCpfWithoutRestriction() {\nRestrictionsApiService restrictionsServices = new RestrictionsApiService();\nboolean isDeleted = restrictionsServices.queryCpf(\"1234567890\");\nAssertions.assertThat(isDeleted).isTrue();\n}  </code></pre>"},{"location":"better-architecture/lab2/#2-changing-the-restrictionstest-shouldreturnrestriction-test","title":"2. Changing the  <code>RestrictionsTest</code> - <code>shouldReturnRestriction()</code> test","text":"<ol> <li>In the <code>RestrictionsTest</code>, comment the current code created in the <code>shouldReturnRestriction()</code> test</li> <li>Create a <code>RestrictionsApiService</code> within the name <code>restrictionsService</code></li> <li>Call the method <code>restrictionsService.queryCpfWithRestriction()</code>, using any CPF (without a restriction)</li> <li>Associate its response to the <code>MessageV1</code> class from <code>com.eliasnogueira.credit.model</code> package (auto-generated from the OpenAPI spec)</li> <li>Add an assertion using the <code>contains()</code> method from AssertJ, where it's necessary to use the <code>getMessage()</code> method from the <code>MessageV1</code> return</li> <li>Run the test</li> </ol>"},{"location":"better-architecture/lab2/#expected-results_1","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully</li> </ul>"},{"location":"better-architecture/lab2/#solution_1","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldReturnRestriction() {\nRestrictionsApiService restrictionsApiService = new RestrictionsApiService();\nMessageV1 message = restrictionsApiService.queryCpfWithRestriction(\"60094146012\");\nAssertions.assertThat(message.getMessage()).contains(\"60094146012\");\n}\n</code></pre> <p>Tip</p> <p>You can remove the duplication of the <code>RestrictionsApiService</code> adding it as a private global variable in the test.</p> <pre><code>class RestrictionsTest extends BaseApiConfiguration {\nprivate RestrictionsApiService restrictionsServices = new RestrictionsApiService();\n@Test\nvoid shouldQueryCpfWithoutRestriction() {\n// code\n}\n@Test\nvoid shouldReturnRestriction() {\n// code\n}\n}\n</code></pre>"},{"location":"better-architecture/lab2/#3-cleaning-up-baseapiconfiguration-class","title":"3. Cleaning up <code>BaseApiConfiguration</code> class","text":"<ol> <li>Open the <code>BaseApiConfiguration</code> located in the <code>com.workshop</code> package in the <code>src/test/java</code> folder</li> <li>Remove the usage of:<ul> <li><code>RestAssured.baseURI = \"http://localhost\";</code></li> <li><code>RestAssured.basePath = \"/api/v1\";</code></li> <li><code>RestAssured.port= 8088;</code></li> </ul> </li> <li>Add (again) the inheritance of the <code>BaseApiConfiguration</code> to the <code>RestrictionsTest</code></li> <li>Run the tests</li> </ol>"},{"location":"better-architecture/lab2/#expected-results_2","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully</li> <li>All the request and response logs showing in the console</li> </ul>"},{"location":"better-architecture/lab2/#solution_2","title":"Solution","text":"Click to see... <pre><code>class RestrictionsTest extends BaseApiConfiguration {\nprivate RestrictionsApiService restrictionsServices = new RestrictionsApiService();\n@Test\nvoid shouldQueryCpfWithoutRestriction() {\nboolean isDeleted = restrictionsServices.queryCpf(\"1234567890\");\nAssertions.assertThat(isDeleted).isTrue();\n}\n@Test\nvoid shouldReturnRestriction() {\nMessageV1 message = restrictionsServices.queryCpfWithRestriction(\"60094146012\");\nAssertions.assertThat(message.getMessage()).contains(\"60094146012\");\n}\n}\n</code></pre>"},{"location":"data/lab1/","title":"Data - Lab 1","text":""},{"location":"data/lab1/#1-create-the-simulationdatafactory-class","title":"1. Create the <code>SimulationDataFactory</code> class","text":""},{"location":"data/lab1/#steps","title":"Steps","text":"<ol> <li>Open the <code>pom.xml</code> and remove the <code>&lt;scope&gt;test&lt;/scope&gt;</code> for the DataFaker library</li> <li>In the <code>com.workshop</code> package create a package called <code>data</code> in the <code>src/main/java</code> </li> <li>Create a class called <code>SimulationDataFactory</code> in the <code>com.workshop</code> in the <code>src/main/java</code></li> <li>Do the following in the class<ul> <li>make the class <code>final</code></li> <li>create a private constructuor</li> </ul> </li> <li>Add the <code>Faker</code> object as a global attribute     <pre><code>private static Faker faker = new Faker();\n</code></pre></li> <li>Add the following code inside it     <pre><code>public Simulation validSimulation() {\nreturn Simulation.builder().\ncpf(faker.number().digits(11)).\nname(faker.name().fullName()).\nemail(faker.internet().emailAddress()).\namount(new BigDecimal(faker.number().numberBetween(100, 40000))).\ninstallments(faker.number().numberBetween(2, 48)).\ninsurance(faker.bool().bool())\n.build();\n}\n</code></pre></li> <li>Open the <code>SimulationsTest</code> class</li> <li>In the <code>shouldCreateNewSimulation()</code> and replace the simulation object by the usage of the <code>SimulationDataFactory.validSimulation()</code></li> <li>Run the test</li> </ol>"},{"location":"data/lab1/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"data/lab1/#solution","title":"Solution","text":"Click to see... <pre><code>class SimulationsTest extends BaseApiConfiguration {\n@Test\nvoid shouldCreateNewSimulation() {\nvar simulation = SimulationDataFactory.validSimulation();\ngiven()\n.body(simulation)\n.contentType(ContentType.JSON)\n.when()\n.post(\"/simulations\")\n.then()\n.statusCode(HttpStatus.SC_CREATED)\n.header(\"Location\", CoreMatchers.containsString(simulation.getCpf()));\n}\n}\n</code></pre>"},{"location":"extras/","title":"Extras Labs","text":""},{"location":"extras/#extra-lab-1","title":"Extra Lab 1","text":"<p>In this lab, you need to implement the client and service abstraction for the Simulations API</p>"},{"location":"extras/#extra-lab-2","title":"Extra Lab 2","text":"<p>In this lab, you will create the basic tests for the Simulations API.</p>"},{"location":"extras/#extra-exercises","title":"Extra exercises","text":"<p>You can add even more tests to exercise your skills. This is the list of tests you can implement:</p>"},{"location":"extras/#restrictions-tests","title":"Restrictions tests","text":"Test Expected result Find a restriction using the <code>/v2</code> endpoint Response body with <code>detail</code> and <code>returnMessage</code> attributes"},{"location":"extras/#simulations-tests","title":"Simulations tests","text":"Test Expected result Create a new simulation using an existing CPF HTTP 409 with a custom message in the response body Delete a simulation that does not exist HTTP 404 Update a simulation that does not exist HTTP 404 Retrieve a simulation that does not exist HTTP 404 Create a simulation with an invalid email HTTP 422 with a custom message in the response body Create a simulation with installments less than 2 or greater than 48 HTTP 422 with a custom message in the response body Create a simulation with an amount less than 1000 or greater than 40000 HTTP 422 with a custom message in the response body"},{"location":"extras/lab1/","title":"Extra - Lab 1","text":""},{"location":"extras/lab1/#1-mapping-objects","title":"1. Mapping objects","text":"<p>We now have two <code>Simulation</code> classes:</p> <ul> <li>one created by us to use in the data generation and methods in the client and service classes as <code>com.workshop.model</code> package</li> <li>another auto-generated by the Open API generator as <code>com.eliasnogueira.credit.model</code> package</li> </ul> <p>Both are almost identical, but even if they were identical we need to map, which means telling our code that both are the same, mapping all the matching attributes. To be able to build a reliable service class for the Simulations API, we need more code.</p>"},{"location":"extras/lab1/#steps","title":"Steps","text":"<ol> <li>Open your <code>pom.xml</code> file</li> <li>In the <code>&lt;properties&gt;</code> section, add the following:     <pre><code>&lt;modelmapper.version&gt;3.1.1&lt;/modelmapper.version&gt;\n</code></pre></li> <li>In the <code>&lt;dependecies&gt;</code> section, add the following:     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.modelmapper&lt;/groupId&gt;\n&lt;artifactId&gt;modelmapper&lt;/artifactId&gt;\n&lt;version&gt;${modelmapper.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Refresh your Maven libraries or run <code>mvn clean package</code></li> <li>In the <code>com.workshop</code> package in the <code>src/main/java</code> folder, create a package called <code>api.client</code></li> <li>Create a Java class named <code>SimulationsApiClient</code> in the <code>com.workshop.api.client</code> package   </li> <li>Add the following method:     <pre><code>private &lt;T&gt; com.eliasnogueira.credit.model.Simulation mapSimulation(Simulation simulation) {\nreturn new ModelMapper().map(simulation, com.eliasnogueira.credit.model.Simulation.class);\n}\n</code></pre></li> <li>Open the <code>Simulation</code> class in the <code>com.workshop.models</code> package in the <code>src/main/java</code> folder</li> <li>Add a new attribute, <code>id</code>, and mark it to be ignored by the JSON conversion     <pre><code>@JsonIgnore\nprivate int id;\n</code></pre></li> </ol>"},{"location":"extras/lab1/#2-create-the-simulationsapiclient-class","title":"2. Create the <code>SimulationsApiClient</code> class","text":""},{"location":"extras/lab1/#steps_1","title":"Steps","text":"<ol> <li> <p>In the <code>SimulationsApiClient</code> class: </p> <ul> <li>Add all the methods related to the Simulations API, associating the following requests with the methods from the generated client</li> </ul> Request What it does Intermal client method <code>GET /simulations</code> Retrieve all simulations or all simulations by a given <code>name</code> <code>getSimulationUsingGET()</code> <code>GET /simulations/{cpf}</code> Retrieve a simulation given its <code>cfp</code> <code>oneUsingGET1()</code> <code>POST /simulations</code> Creates a new simulation <code>newSimulationUsingPOST()</code> <code>PUT /simulations/{cpf}</code> Update an existing simulation <code>updateSimulationUsingPUT()</code> <code>DELETE /simulations/{cpf}</code> Delete an existing simulation <code>deleteUsingDELETE()</code> </li> <li> <p>Before the method creation, add the following code to Map the <code>Simulation</code> objects from the different packages    <pre><code> private &lt;T&gt; com.eliasnogueira.credit.model.Simulation mapSimulation(Simulation simulation) {\nreturn new ModelMapper().map(simulation, com.eliasnogueira.credit.model.Simulation.class);\n}\n</code></pre></p> </li> <li>The <code>body()</code> method in the <code>newSimulationUsingPOST()</code> and <code>updateSimulationUsingPUT()</code> must use, as the parameter value the following:  <pre><code>mapSimulation(simulation)\n</code></pre></li> </ol> <p>Tips</p> <p>You will have:</p> <ul> <li>two methods to retrieve the simulations:<ul> <li>one for all</li> <li>another based on the query parameter <code>name</code> </li> </ul> </li> </ul> <p>Don't forget to create the method parameter matching the necessary path and body parameters.</p>"},{"location":"extras/lab1/#expected-results","title":"Expected results","text":"<ul> <li><code>SimulationsApiClient</code> class created</li> </ul>"},{"location":"extras/lab1/#solution","title":"Solution","text":"Click to see... <pre><code>public class SimulationsApiClient {\nprivate final SimulationsApi simulationsApi = new RestApiClientBuilder().build(SimulationsApi::simulations);\npublic Response retrieveSimulations() {\nreturn simulationsApi.getSimulationUsingGET().execute(identity());\n}\npublic Response retrieveSimulations(String name) {\nreturn simulationsApi.getSimulationUsingGET().nameQuery(name).execute(identity());\n}\npublic Response retrieveSimulation(String cpf) {\nreturn simulationsApi.oneUsingGET1().cpfPath(cpf).execute(identity());\n}\npublic Response createSimulation(Simulation simulation) {\nreturn simulationsApi.newSimulationUsingPOST().body(mapSimulation(simulation)).execute(identity());\n}\npublic Response updateSimulation(String cpf, Simulation simulation) {\nreturn simulationsApi.updateSimulationUsingPUT().cpfPath(cpf).body(mapSimulation(simulation)).execute(identity());\n}\npublic Response deleteSimulation(String cpf) {\nreturn simulationsApi.deleteUsingDELETE().cpfPath(cpf).execute(identity());\n}\nprivate &lt;T&gt; com.eliasnogueira.credit.model.Simulation mapSimulation(Simulation simulation) {\nreturn new ModelMapper().map(simulation, com.eliasnogueira.credit.model.Simulation.class);\n}\n}\n</code></pre>"},{"location":"extras/lab1/#3-create-the-simulationsapiservice-class","title":"3. Create the <code>SimulationsApiService</code> class","text":""},{"location":"extras/lab1/#steps_2","title":"Steps","text":"<ol> <li>In the <code>com.workshop</code> package in the <code>src/main/java</code> folder, create a package called <code>api.service</code></li> <li>Create a Java class named <code>SimulationsApiService</code> in the <code>com.workshop.api.service</code> package</li> <li>Add a global instance to the <code>SimulationApiClient</code></li> <li>Add all the necessary methods related to the <code>SimulationsApiClient</code></li> </ol> <p>Tips</p> <p>The approach for all methods is (except for the delete) <pre><code>return simulationsApiClient.methodFromClient().then().statusCode(CORRECT_STATUS_CODE).extract().as(RealClassFromClientToReturn.class);\n</code></pre></p> <p>In the case of many resulsts (<code>retrieveSimulations()</code>) you need to:</p> <ul> <li>make the method return a list, for example: <code>List&lt;Simulation&gt;</code></li> <li>extract the class as an array, example: `extract().as(Simulation[].class)</li> <li>return the whole command as a List, for example: <code>List.of(content)</code></li> </ul> <p>The <code>createSimulation()</code> method should return and extract the <code>java.net.URI</code> class </p> <p>The <code>deleteSimulation()</code> will return a boolean, as <code>true</code>, after the request.</p>"},{"location":"extras/lab1/#expected-results_1","title":"Expected results","text":"<ul> <li><code>SimulationsApiService</code> class created</li> </ul>"},{"location":"extras/lab1/#solution_1","title":"Solution","text":"Click to see... <pre><code>import io.restassured.http.Header;\nimport com.workshop.api.client.SimulationsApiClient;\nimport com.workshop.models.Simulation;\nimport java.util.List;\nimport static java.util.List.of;\nimport static org.apache.http.HttpStatus.SC_CREATED;\nimport static org.apache.http.HttpStatus.SC_NOT_FOUND;\nimport static org.apache.http.HttpStatus.SC_OK;\npublic class SimulationsApiService {\nprivate final SimulationsApiClient simulationsApiClient = new SimulationsApiClient();\npublic List&lt;Simulation&gt; retrieveSimulations() {\nreturn of(simulationsApiClient.retrieveSimulations().then().statusCode(SC_OK).extract().as(Simulation[].class));\n}\npublic List&lt;Simulation&gt; retrieveSimulations(String name) {\nreturn of(simulationsApiClient.retrieveSimulations(name).then().statusCode(SC_OK).extract().as(Simulation[].class));\n}\npublic Simulation retrieveSimulation(String cpf) {\nreturn simulationsApiClient.retrieveSimulation(cpf).then().statusCode(SC_OK).extract().as(Simulation.class);\n}\npublic Header createSimulation(Simulation simulation) {\nreturn simulationsApiClient.createSimulation(simulation).then().statusCode(SC_CREATED)\n.extract().response().getHeaders().get(\"Location\");\n}\npublic Simulation updateSimulation(String cpf, Simulation simulation) {\nreturn simulationsApiClient.updateSimulation(cpf, simulation).then().extract().as(Simulation.class);\n}\npublic boolean deleteSimulation(String cpf) {\nsimulationsApiClient.deleteSimulation(cpf).then().statusCode(SC_NO_CONTENT);\nreturn true;\n}\n}\n</code></pre>"},{"location":"extras/lab2/","title":"Extra - Lab 2","text":"<p>In this lab, you need to refactor the <code>SimulationsTest</code> placed in the <code>com.workshop.simulation</code> in the <code>src/java/test</code> folder. A better approach is to comment on all the previous tests.</p>"},{"location":"extras/lab2/#1-refactor-the-shouldretrieveallsimulations-test","title":"1. Refactor the <code>shouldRetrieveAllSimulations()</code> test","text":""},{"location":"extras/lab2/#precondition","title":"Precondition","text":"<ol> <li>Create a global attribute instance for the <code>SimulationsApiService</code> <pre><code>private final SimulationsApiService simulationsApiService = new SimulationsApiService();\n</code></pre></li> </ol>"},{"location":"extras/lab2/#steps","title":"Steps","text":"<ol> <li>In the <code>shouldRetrieveAllSimulations()</code> test, use the <code>SimulationsApiService</code> to:<ul> <li>retrieve all the simulations</li> <li>assert if the list size is equa to or higher than 1</li> </ul> </li> <li>Run the test</li> </ol> <p>Tips</p> <p>To verify the returned list size you can use the following matcher from AssertJ: <pre><code>Assertions.assertThat(simulations).hasSizeGreaterThanOrEqualTo(1);\n</code></pre></p>"},{"location":"extras/lab2/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"extras/lab2/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldRetrieveAllSimulations() {\nvar simulations = simulationsApiService.retrieveSimulations();\nAssertions.assertThat(simulations).hasSizeGreaterThanOrEqualTo(1);\n}    </code></pre>"},{"location":"extras/lab2/#2-create-a-test-to-find-a-simulation-by-name","title":"2. Create a test to find a simulation by name","text":""},{"location":"extras/lab2/#steps_1","title":"Steps","text":"<ol> <li>Create a new test method called <code>shouldRetrieveSimulationByItsName()</code></li> <li>Use the method, from the service class, which is expecting the name as a query parameter</li> <li>Assert only the name returned and for this use the following code    <pre><code>Assertions.assertThat(simulations).anySatisfy(\nsimulation -&gt; Assertions.assertThat(simulation.getName()).isEqualTo(\"Tom\"));\n</code></pre></li> <li>Run the test</li> </ol> <p>Tips</p> <p>To verify the returned list size you can use the following matcher from AssertJ: <pre><code>Assertions.assertThat(simulations).hasSizeGreaterThanOrEqualTo(1);\n</code></pre></p>"},{"location":"extras/lab2/#expected-results_1","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"extras/lab2/#solution_1","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldRetrieveSimulationByItsName() {\nvar simulations = simulationsApiService.retrieveSimulations(\"Tom\");\nAssertions.assertThat(simulations).anySatisfy(\nsimulation -&gt; Assertions.assertThat(simulation.getName()).isEqualTo(\"Tom\"));\n}   </code></pre>"},{"location":"extras/lab2/#3-create-a-test-to-find-a-simulation-by-cpf","title":"3. Create a test to find a simulation by cpf","text":""},{"location":"extras/lab2/#steps_2","title":"Steps","text":"<ol> <li>Create a new test method called <code>shouldFindSimulationByCpf()</code></li> <li>Use the method, from the service class, which is expecting the <code>cpf</code> as path parameter</li> <li>Assert all the data, including the <code>id</code>, using the following code snippet    <pre><code>SoftAssertions.assertSoftly(softly -&gt; {\nAssertions.assertThat(simulation.getSomething()).assertMethod();\n// similar line for the other attributes\n});\n</code></pre></li> <li>Run the test</li> </ol> <p>Soft assertions</p> <p>AssertJ has a feature called Soft Assertions It will assert all data inside the <code>assertSoftly</code> method, not stopping the execution when the assertion fails.</p> <p>Tips</p> <p>Use the following assertions methods to replace the <code>assertMethod()</code> in step 3:</p> <ul> <li><code>isNotNull()</code> for the <code>id</code> assertion</li> <li><code>isEqualTo()</code> for all text assertions</li> <li><code>isTrue()</code> or <code>isFalse()</code> for the boolean assertion</li> </ul>"},{"location":"extras/lab2/#expected-results_2","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"extras/lab2/#solution_2","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldFindSimulationByCpf() {\nvar simulation = simulationsApiService.retrieveSimulation(\"66414919004\");\nSoftAssertions.assertSoftly(softly -&gt; {\nAssertions.assertThat(simulation.getId()).isNotNull();\nAssertions.assertThat(simulation.getName()).isEqualTo(\"Tom\");\nAssertions.assertThat(simulation.getCpf()).isEqualTo(\"66414919004\");\nAssertions.assertThat(simulation.getEmail()).isEqualTo(\"tom@gmail.com\");\nAssertions.assertThat(simulation.getAmount()).isEqualTo(\"11000.00\");\nAssertions.assertThat(simulation.getInstallments()).isEqualTo(3);\nAssertions.assertThat(simulation.isInsurance()).isTrue();\n});\n}  </code></pre>"},{"location":"extras/lab2/#4-create-a-test-to-create-a-new-simulation","title":"4. Create a test to create a new simulation","text":""},{"location":"extras/lab2/#steps_3","title":"Steps","text":"<ol> <li>Create a new test method called <code>shouldCreateSimulation()</code></li> <li>Create a <code>Simulation</code> object to use as the request body, with any data you like inside</li> <li>Assert the return, which is a <code>Header</code> using the <code>getValue()</code> and the <code>contains()</code> assertion to see if the cpf is present in the location    <pre><code>Assertions.assertThat(header.getValue()).contains(simulation.getCpf());\n</code></pre></li> <li>Run the test</li> </ol>"},{"location":"extras/lab2/#expected-results_3","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"extras/lab2/#solution_3","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldCreateSimulation() {\nvar simulation = Simulation.builder().name(\"Robert\").cpf(\"98765432103\").email(\"robert@gmail.com\")\n.amount(new BigDecimal(\"3000.00\")).installments(5).insurance(true).build();\nvar header = simulationsApiService.createSimulation(simulation);\nAssertions.assertThat(header.getValue()).contains(simulation.getCpf());\n}\n</code></pre>"},{"location":"extras/lab2/#5-create-a-test-to-update-an-existing-simulation","title":"5. Create a test to update an existing simulation","text":""},{"location":"extras/lab2/#steps_4","title":"Steps","text":"<ol> <li>Create a new test method called <code>shouldUpdateExistingSimulation()</code></li> <li>Create a <code>Simulation</code> object to use as the request body, with any data you like inside</li> <li>Create the simulation using the <code>createSimulation()</code> method from the service class</li> <li>Change the name of the Simulation created in step 2</li> <li>Update the Simulation using the <code>cpf</code> from the object created in step 2</li> <li>Assert that the Simulation object from step 2 is equal to the one returned from the updated in step 5</li> <li>Run the test</li> </ol>"},{"location":"extras/lab2/#expected-results_4","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"extras/lab2/#solution_4","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldUpdateExistingSimulation() {\nvar newSimulation = Simulation.builder().name(\"Robert\").cpf(\"748392749450\").email(\"robert@gmail.com\")\n.amount(new BigDecimal(\"3000.00\")).installments(5).insurance(true).build();\nsimulationsApiService.createSimulation(newSimulation);\nnewSimulation.setName(\"Different name\");\nvar simulationUpdated = simulationsApiService.updateSimulation(newSimulation.getCpf(), newSimulation);\nAssertions.assertThat(simulationUpdated).isEqualTo(newSimulation);\n}\n</code></pre>"},{"location":"extras/lab2/#6-create-a-test-to-delete-an-existing-simulation","title":"6. Create a test to delete an existing simulation","text":""},{"location":"extras/lab2/#steps_5","title":"Steps","text":"<ol> <li>Create a new test method called <code>shouldDeleteExistingSimulation()</code></li> <li>Create a <code>Simulation</code> object to use as the request body, with any data you like inside</li> <li>Create the simulation using the <code>createSimulation()</code> method from the service class</li> <li>Delete the simulation created using the delete method from the service class, using the cpf from the simulation created</li> <li>Assert that the return is <code>true</code></li> </ol>"},{"location":"extras/lab2/#expected-results_5","title":"Expected results","text":"<ul> <li>Green test execution</li> </ul>"},{"location":"extras/lab2/#solution_5","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldDeleteExistingSimulation() {\nvar simulation = Simulation.builder().name(\"Robert\").cpf(\"874222357\").email(\"robert@gmail.com\")\n.amount(new BigDecimal(\"3000.00\")).installments(5).insurance(true).build();\nsimulationsApiService.createSimulation(simulation);\nvar isDeleted = simulationsApiService.deleteSimulation(simulation.getCpf());\nAssertions.assertThat(isDeleted).isTrue();\n}\n</code></pre>"},{"location":"logging/lab1/","title":"Logging - Lab 1","text":""},{"location":"logging/lab1/#1-add-the-request-and-response-filters-to-the-basetest-class","title":"1. Add the request and response filters to the BaseTest class","text":""},{"location":"logging/lab1/#steps","title":"Steps","text":"<ol> <li>Open the <code>BaseApiConfiguration</code> class located at <code>src/test/java</code> in the <code>com.workshop</code> package</li> <li>At the end of the method add: <ul> <li>the <code>RestAssured.filters()</code> method</li> <li><code>new RequestLoggingFilter()</code> as the first parameter</li> <li><code>new ResponseLoggingFilter()</code> as the second parameter</li> </ul> </li> <li>Run the tests</li> </ol>"},{"location":"logging/lab1/#expected-results","title":"Expected results","text":"<ul> <li>The test output will show all the requests and responses for each test executed</li> </ul>"},{"location":"logging/lab1/#solution","title":"Solution","text":"Click to see... <pre><code>public class BaseApiConfiguration {\n@BeforeAll\nstatic void mainConfiguration() {\nRestAssured.baseURI = \"http://localhost\";\nRestAssured.basePath = \"/api/v1\";\nRestAssured.port= 8088;\nRestAssured.config = RestAssuredConfig.newConfig().\njsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.BIG_DECIMAL));\nRestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\nRestAssured.filters(new RequestLoggingFilter(), new ResponseLoggingFilter());\n}\n}\n</code></pre>"},{"location":"object-mapping/lab1/","title":"Object Mapping - Lab 1","text":""},{"location":"object-mapping/lab1/#1-create-the-simulation-object","title":"1. Create the Simulation object","text":""},{"location":"object-mapping/lab1/#steps","title":"Steps","text":"<ol> <li>In the <code>com.workshop</code> package in the <code>src/main/java</code> folder, create a package called <code>models</code></li> <li>Create a Java class named <code>Simulation</code> in the <code>com.workshop.models</code> package</li> <li>Add the following annotation on the top of the class name, from Lombok:<ul> <li><code>@Data</code></li> <li><code>@Builder</code></li> <li><code>@NoArgsConstructor</code></li> <li><code>@AllArgsConstructor</code></li> </ul> </li> <li> <p>Add the following <code>private</code> attributes and their type:</p> type name <code>String</code> name <code>String</code> cpf <code>String</code> email <code>BigDecimal</code> amount <code>int</code> installments <code>boolean</code> insurance </li> </ol>"},{"location":"object-mapping/lab1/#expected-results","title":"Expected results","text":"<ul> <li><code>Simulation</code> model class created within the correct annotations and attributes</li> </ul>"},{"location":"object-mapping/lab1/#solution","title":"Solution","text":"Click to see... <pre><code>package com.workshop.models;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport java.math.BigDecimal;\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Simulation {\nprivate String name;\nprivate String cpf;\nprivate String email;\nprivate BigDecimal amount;\nprivate int installments;\nprivate boolean insurance;\n}\n</code></pre>"},{"location":"object-mapping/lab1/#2-create-the-test-for-the-post-request","title":"2. Create the test for the <code>POST</code> request","text":""},{"location":"object-mapping/lab1/#steps_1","title":"Steps","text":"<ol> <li>Open the <code>SimulationsTest</code> in <code>com.workshop.simulation</code> in the <code>src/test/java</code> folder</li> <li>Create a test method named <code>shouldCreateNewSimulation()</code></li> <li>Create a <code>Simulation</code> object using the builder method</li> <li>Add the precondition using the following methods:<ul> <li><code>body()</code>: add the <code>simulation</code> object as a parameter</li> <li><code>contentType()</code> add the <code>ContentType.JSON</code> from the REST Assured package</li> </ul> </li> <li>Add the <code>post()</code> request for the <code>/simulations/</code> endpoint</li> </ol> <p>Tips</p> <ul> <li>you can use the class name, followed by the <code>builder()</code> method, then the methods. Example: <code>Simulation.builder().</code></li> </ul>"},{"location":"object-mapping/lab1/#expected-results_1","title":"Expected results","text":"<ul> <li>Test partially created with the precondition (<code>given()</code>) and request (<code>when()</code>), without assertions, yet!</li> </ul>"},{"location":"object-mapping/lab1/#solution_1","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldCreateNewSimulation() {\nvar simulation = Simulation.builder().name(\"Elias\").cpf(\"123456789\")\n.email(\"elias@eliasnogueira.com\").amount(new BigDecimal(\"3000\"))\n.installments(5).insurance(true).build();\ngiven()\n.body(simulation)\n.contentType(ContentType.JSON)\n.when()\n.post(\"/simulations\");\n}\n</code></pre>"},{"location":"object-mapping/lab1/#3-addin-the-assertion-for-the-post-request","title":"3. Addin the assertion for the <code>POST</code> request","text":""},{"location":"object-mapping/lab1/#steps_2","title":"Steps","text":"<ol> <li>In the <code>shouldCreateNewSimulation()</code> add the assert action (<code>then()</code>):<ul> <li>validate the status code as 201 (CREATED)</li> <li>add the <code>header()</code> method using:<ul> <li><code>Location</code> as the attribute to assert</li> <li><code>CoreMatchers.containsString</code> as the matcher, adding the <code>CPF</code> value</li> </ul> </li> </ul> </li> <li>Run the test</li> </ol> <p>Tips</p> <ul> <li>the code will look like    <pre><code>.then()\n.statusCode(STATUS-CODE-HERE)\n.header(\"Location\", CoreMatchers.containsString(SOMETHING-HERE));\n</code></pre></li> <li>you can get the <code>CPF</code> value from the <code>simulation</code> object</li> </ul> <p>###  Expected results</p> <ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>Header</li> </ul> </li> </ul>"},{"location":"object-mapping/lab1/#solution_2","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldCreateNewSimulation() {\nvar simulation = Simulation.builder().name(\"Elias\").cpf(\"123456789\").email(\"elias@eliasnogueira.com\")\n.amount(new BigDecimal(\"3000\")).installments(5).insurance(true).build();\ngiven()\n.body(simulation)\n.contentType(ContentType.JSON)\n.when()\n.post(\"/simulations\")\n.then()\n.statusCode(HttpStatus.SC_CREATED)\n.header(\"Location\", CoreMatchers.containsString(simulation.getCpf()));\n}\n</code></pre>"},{"location":"object-mapping/lab2/","title":"Object Mapping - Lab 2","text":""},{"location":"object-mapping/lab2/#1-update-an-existing-simulation","title":"1. Update an existing Simulation","text":""},{"location":"object-mapping/lab2/#steps","title":"Steps","text":"<ol> <li>In the <code>SimulationsTest</code> class, create a test method named <code>shouldUpdateExistingSimulation()</code></li> <li>Create two different data:<ul> <li><code>String exinstingCpf</code> with the value as an existing one</li> <li><code>Simulation</code> object with new data, using the builder</li> </ul> </li> <li>Add a precondition (<code>given()</code>) and<ul> <li>add a <code>pathParameter()</code> using its value as the existing CPF (the one we need to be able to update)</li> <li>add a <code>body()</code> using its value as the simulation with the updated data</li> <li>add the <code>contentType</code> related to the body</li> </ul> </li> <li>Add the action using the <code>put()</code> method to <code>/simulations/{cpf}</code></li> <li>Add the assertion (<code>then()</code>) for the:<ul> <li><code>statusCode</code> as <code>200 OK</code></li> <li><code>body</code>, as a soft assertion, for each attribute</li> </ul> </li> <li>Run the test</li> </ol> <p>Tips</p> <ul> <li>you can use the <code>Simulation</code> object to assert the data, as you are updating it    <pre><code>.body(\"cpf\", CoreMatchers.is(simulation.getCpf())\n</code></pre></li> </ul>"},{"location":"object-mapping/lab2/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>response body</li> </ul> </li> </ul>"},{"location":"object-mapping/lab2/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldUpdateExistingSimulation() {\nString existingCpf = \"17822386034\";\nvar simulation = Simulation.builder().name(\"Elias\").cpf(\"17822386034\").email(\"elias@eliasnogueira.com\")\n.amount(new BigDecimal(\"3000.00\")).installments(5).insurance(true).build();\ngiven()\n.pathParam(\"cpf\", existingCpf)\n.body(simulation)\n.contentType(ContentType.JSON)\n.when()\n.put(\"/simulations/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_OK)\n.body(\n\"cpf\", CoreMatchers.is(simulation.getCpf()),\n\"name\", CoreMatchers.is(simulation.getName()),\n\"email\", CoreMatchers.is(simulation.getEmail()),\n\"amount\", CoreMatchers.is(simulation.getAmount()),\n\"installments\", CoreMatchers.is(simulation.getInstallments()),\n\"insurance\", CoreMatchers.is(simulation.isInsurance())\n);\n}\n</code></pre>"},{"location":"object-mapping/lab3/","title":"Object Mapping - Lab 3","text":""},{"location":"object-mapping/lab3/#1-using-object-deserialization","title":"1. Using object deserialization","text":""},{"location":"object-mapping/lab3/#steps","title":"Steps","text":"<ol> <li>In the <code>shouldUpdateExistingSimulation()</code> remove the <code>body()</code> method</li> <li>Add the method <code>extract().as()</code>, adding the <code>Simulation.class</code> as a parameter for the method <code>as()</code></li> <li>Create an object called <code>simulationUpdated</code> and associate it with the <code>given()</code> method     <pre><code>var updated  = given()\n</code></pre></li> <li>Add an assertion using the AssertJ library that will verify if the simulation created is equal to the simulation updated     <pre><code>Assertions.assertThat(simulationUpdated).isEqualTo(simulation);\n</code></pre></li> <li>Run the test</li> </ol>"},{"location":"object-mapping/lab3/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>response body</li> </ul> </li> </ul> <p>Info</p> <p>Note that we are verifying two objects using AssertJ.</p> <p>When one of the values in an attribute is not equal, AssertJ will show the attribute that does not matches.</p> <p>This approach adds an elegant, less code, and modern solution to the assertion.</p>"},{"location":"object-mapping/lab3/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldUpdateExistingSimulation() {\nString existingCpf = \"17822386034\";\nvar simulation = Simulation.builder().name(\"Elias\").cpf(\"17822386034\").email(\"elias@eliasnogueira.com\")\n.amount(new BigDecimal(\"3000.00\")).installments(5).insurance(true).build();\nvar simulationUpdated =\ngiven()\n.pathParam(\"cpf\", existingCpf)\n.body(simulation)\n.contentType(ContentType.JSON)\n.when()\n.put(\"/simulations/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_OK)\n.extract().as(Simulation.class);\nAssertions.assertThat(simulationUpdated).isEqualTo(simulation);\n}\n</code></pre>"},{"location":"open-api-generator/lab1/","title":"OpenAPI Generator - Lab 1","text":""},{"location":"open-api-generator/lab1/#1-download-the-spec-from-the-project","title":"1. Download the spec from the project","text":""},{"location":"open-api-generator/lab1/#steps","title":"Steps","text":"<ol> <li>Open the <code>pom.xml</code> in the project root folder</li> <li>Go to the <code>&lt;build&gt; -&gt; &lt;plugins&gt;</code> section and locate the one within the <code>wagon-maven-plugin</code> as <code>artifactId</code></li> <li>After the <code>&lt;version&gt;</code> section, add the following code    <pre><code> &lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;download-credit-api-spec&lt;/id&gt;\n&lt;goals&gt;\n&lt;goal&gt;download-single&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;phase&gt;generate-sources&lt;/phase&gt;\n&lt;configuration&gt;\n&lt;url&gt;https://raw.githubusercontent.com/eliasnogueira/credit-api/main/src/main/resources/static/credit-api.yaml&lt;/url&gt;\n&lt;toDir&gt;${project.basedir}/target/openapiSpecs&lt;/toDir&gt;\n&lt;/configuration&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n</code></pre></li> <li>Execute the following command in the Terminal    <pre><code>mvn compile\n</code></pre></li> </ol>"},{"location":"open-api-generator/lab1/#expected-results","title":"Expected results","text":"<ul> <li>The build will be successful</li> <li>You will see the following log related to the <code>wagon-maven-plugin</code> <pre><code> [INFO] --- wagon-maven-plugin:2.0.2:download-single (download-credit-api-spec) @ credit-api-tests ---\n [INFO] Downloading: https://raw.githubusercontent.com/eliasnogueira/credit-api/main/src/main/resources/static/credit-api.yaml to YOUR_COMPUTER_PATH/credit-api-tests/target/openapiSpecs/credit-api.yaml\n</code></pre></li> <li>The <code>credit-api.yaml</code> file will be placed in the <code>target/openapiSpecs</code> folder</li> </ul>"},{"location":"open-api-generator/lab2/","title":"OpenAPI Generator - Lab 2","text":""},{"location":"open-api-generator/lab2/#1-generate-the-client-api","title":"1. Generate the Client Api","text":""},{"location":"open-api-generator/lab2/#steps","title":"Steps","text":"<ol> <li>Open the <code>pom.xml</code> in the project root folder</li> <li>Go to the <code>&lt;build&gt; -&gt; &lt;plugins&gt;</code> section and locate the one within the <code>openapi-generator-maven-plugin</code> as <code>artifactId</code></li> <li>After the <code>&lt;version&gt;</code> section, add the following code    <pre><code> &lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;generate-client-api-code&lt;/id&gt;\n&lt;goals&gt;\n&lt;goal&gt;generate&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;phase&gt;generate-sources&lt;/phase&gt;\n&lt;configuration&gt;\n&lt;inputSpec&gt;\n${project.build.directory}/openapiSpecs/credit-api.yaml\n             &lt;/inputSpec&gt;\n&lt;invokerPackage&gt;com.eliasnogueira.credit.invoker&lt;/invokerPackage&gt;\n&lt;apiPackage&gt;com.eliasnogueira.credit.api&lt;/apiPackage&gt;\n&lt;modelPackage&gt;com.eliasnogueira.credit.model&lt;/modelPackage&gt;\n&lt;generatorName&gt;java&lt;/generatorName&gt;\n&lt;generateApiTests&gt;false&lt;/generateApiTests&gt;\n&lt;generateModelTests&gt;false&lt;/generateModelTests&gt;\n&lt;configOptions&gt;\n&lt;library&gt;rest-assured&lt;/library&gt;\n&lt;serializationLibrary&gt;jackson&lt;/serializationLibrary&gt;\n&lt;/configOptions&gt;\n&lt;/configuration&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n</code></pre></li> <li>Execute the following command in the Terminal    <pre><code>mvn compile\n</code></pre></li> </ol>"},{"location":"open-api-generator/lab2/#expected-results","title":"Expected results","text":"<ul> <li>The build will be successful</li> <li>You will see the following log related to the <code>openapi-generator-maven-plugin</code> <pre><code> [INFO] --- openapi-generator-maven-plugin:6.2.1:generate (generate-client-api-code) @ credit-api-tests ---\n [INFO] Generating with dryRun=false\n [INFO] Output directory (YOUR_DIR/credit-api-tests/target/generated-sources/openapi) does not exist, or is inaccessible. No file (.openapi-generator-ignore) will be evaluated.\n [INFO] OpenAPI Generator: java (client)\n [INFO] Generator 'java' is considered stable.\n [INFO] Environment variable JAVA_POST_PROCESS_FILE not defined so the Java code may not be properly formatted. To define it, try 'export JAVA_POST_PROCESS_FILE=\"/usr/local/bin/clang-format -i\"' (Linux/Mac)\n [INFO] NOTE: To enable file post-processing, 'enablePostProcessFile' must be set to `true` (--enable-post-process-file for CLI).\n [INFO] Processing operation OPERATION\n [INFO] writing file FILE\n</code></pre></li> <li>The Client Api and Model classes will be created in the following structure   <pre><code>\u2514\u2500\u2500 target/\n  \u2514\u2500\u2500 generated-resources/\n      \u2514\u2500\u2500 openapi/\n          \u2514\u2500\u2500 src/\n              \u2514\u2500\u2500 main/\n                  \u2514\u2500\u2500 java/\n                      \u2514\u2500\u2500 com/\n                          \u2514\u2500\u2500 eliasnogueira/\n                              \u2514\u2500\u2500 credit/\n                                  \u251c\u2500\u2500 api/\n                                  \u2502   \u2514\u2500\u2500 *.java\n                                  \u2514\u2500\u2500 model/\n                                      \u2514\u2500\u2500 *.java\n</code></pre></li> </ul>"},{"location":"open-api-generator/lab2/#additional-post-step","title":"Additional post-step","text":"<ol> <li>Open the <code>target</code> folder</li> <li>Right-click the <code>generated-sources</code> folder</li> <li>Select <code>Mark directory as -&gt; Generated Sources Root</code></li> </ol> <p>Why we do have the additional post-step?</p> <p>The <code>openapi-generator-maven-plugin</code> is generating a Java project in the <code>target/generated-sources</code> directory. We need to tell the IDE to consider that folder as \"sources\" inferring that we will use the code inside it in the project.</p>"},{"location":"req-resp-specification/lab1/","title":"Request and Response Specification - Lab 1","text":""},{"location":"req-resp-specification/lab1/#1-creating-a-generic-request-specification","title":"1. Creating a generic request specification","text":""},{"location":"req-resp-specification/lab1/#steps","title":"Steps","text":"<ol> <li>Create a package <code>specs</code> inside the <code>com.workshop</code> at <code>src/main/java</code></li> <li>Create a class called <code>SharedRequestSpecs</code> in the <code>com.workshop.specs</code> package</li> <li>Create a <code>public static</code> method called <code>cpfPathParameter</code> adding the parameter <code>String cpf</code> to it</li> <li>Inside the method build a request specification add the path parameter to it, fix the <code>cpf</code> parameter name, and add the method parameter as its value</li> </ol> <p>Tips</p> <p>The method in step 3 will look like this: <pre><code>public static RequestSpecification cpfPathParameter(String cpf) {\n}\n</code></pre></p> <p>The content of the method in step 4 will look like this: <pre><code>return new RequestSpecBuilder().addPathParams(\"cpf\",cpf).build();\n</code></pre></p>"},{"location":"req-resp-specification/lab1/#expected-results","title":"Expected results","text":"<ul> <li>Just the class creation \ud83d\ude0a</li> </ul>"},{"location":"req-resp-specification/lab1/#solution","title":"Solution","text":"Click to see... <pre><code>public class SharedRequestSpecs {\npublic static RequestSpecification cpfPathParameter(String cpf) {\nreturn new RequestSpecBuilder().addPathParams(\"cpf\",cpf).build();\n}\n}\n</code></pre>"},{"location":"req-resp-specification/lab1/#2-modify-the-tests-in-the-restrictionstest-class","title":"2. Modify the tests in the <code>RestrictionsTest</code> class","text":""},{"location":"req-resp-specification/lab1/#steps_1","title":"Steps","text":"<ol> <li>Open the <code>RestrictionsTest</code> class located at <code>src/test/java</code> in the <code>com.workshop.restriction</code> package</li> <li>In both tests: <ul> <li>replace the <code>pathParam()</code> method by the <code>spec()</code> method</li> <li>use the <code>cpfPathParameter()</code> from the <code>SharedRequestSpecs</code> class</li> <li>don't forget to keep the same data (<code>cpf</code>) in both tests</li> </ul> </li> <li>Run the tests</li> </ol>"},{"location":"req-resp-specification/lab1/#expected-results_1","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>response body</li> </ul> </li> </ul>"},{"location":"req-resp-specification/lab1/#solution_1","title":"Solution","text":"Click to see... <pre><code>class RestrictionsTest extends BaseApiConfiguration {\n@Test\n@DisplayName(\"Should query CPF without restriction\")\nvoid shouldQueryCpfWithoutRestriction() {\ngiven()\n.spec(SharedRequestSpecs.cpfPathParameter(\"1234567890\"))\n.when()\n.get(\"/restrictions/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_NOT_FOUND);\n}\n@Test\nvoid shouldReturnRestriction() {\ngiven()\n.spec(SharedRequestSpecs.cpfPathParameter(\"62648716050\"))\n.when()\n.get(\"/restrictions/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_OK)\n.body(\"message\", CoreMatchers.is(\"CPF 62648716050 has a restriction\"));\n}\n}\n</code></pre>"},{"location":"rest-assured-basics/lab1/","title":"REST Assured Basics - Lab 1","text":""},{"location":"rest-assured-basics/lab1/#1-base-test-class","title":"1. Base Test class","text":"<p>The base test class is one test pattern that must be used in any layer. Let's add the basic RESTAssured configuration:</p> <ol> <li>Create a class named <code>BaseApiConfiguration</code> in the <code>com.workshop</code> package at <code>src/test/java/</code> folder</li> <li>Add the keyword abstract on its declaration <pre><code>public abstract class BaseApiConfiguration {\n}\n</code></pre></li> <li>Add the configuration necessary to execute any later test: <pre><code>import io.restassured.RestAssured;\nimport io.restassured.config.JsonConfig;\nimport io.restassured.config.RestAssuredConfig;\nimport io.restassured.path.json.config.JsonPathConfig;\nimport org.junit.jupiter.api.BeforeAll;\npublic abstract class BaseApiConfiguration {\n@BeforeAll\nstatic void mainConfiguration() {\nRestAssured.baseURI = \"http://localhost\";\nRestAssured.basePath = \"/api/v1\";\nRestAssured.port= 8088;\nRestAssured.config = RestAssuredConfig.newConfig().\njsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.BIG_DECIMAL));\nRestAssured.enableLoggingOfRequestAndResponseIfValidationFails();;\n}\n}\n</code></pre></li> </ol>"},{"location":"rest-assured-basics/lab1/#2-add-the-restrictions-tests","title":"2. Add the restrictions tests","text":""},{"location":"rest-assured-basics/lab1/#21-create-the-package-to-add-the-restrictions-tests","title":"2.1 Create the package to add the restrictions tests","text":"<ol> <li>Create an additional package called <code>restriction</code> in <code>com.workshop</code> in the <code>src/test/java</code> folder</li> </ol>"},{"location":"rest-assured-basics/lab1/#22-search-for-a-cpf-without-restriction","title":"2.2 Search for a CPF without restriction","text":""},{"location":"rest-assured-basics/lab1/#steps","title":"Steps","text":"<ol> <li>Create a Java class named <code>RestrictionsTest</code> in <code>com.workshop.restriction</code> in the <code>src/test/java</code> folder</li> <li>Make <code>RestrictionsTest</code> extends <code>BaseApiConfiguration</code></li> <li>Create a test method named <code>shouldQueryCpfWithoutRestriction()</code></li> <li>Add the following to the test:</li> <li>pre-condition (<code>given()</code>) using a path parameter <code>pathParam</code> using<ul> <li>key: <code>cpf</code></li> <li>value: <code>1234567890</code></li> </ul> </li> <li>action (<code>when()</code>) to get (<code>get()</code>) the <code>/restrictions/{cpf}</code> endpoint</li> <li>assert (<code>then()</code>) in the status code expecting HTTP 404<ul> <li>tip: use <code>HttpStatus.SC_NOT_FOUND</code></li> </ul> </li> <li>Run the test</li> </ol>"},{"location":"rest-assured-basics/lab1/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution where the verification of the status code is successful</li> </ul>"},{"location":"rest-assured-basics/lab1/#solution","title":"Solution","text":"Click to see... <pre><code>import org.apache.http.HttpStatus;\nimport org.junit.jupiter.api.Test;\nimport com.workshop.BaseApiConfiguration;\nimport static io.restassured.RestAssured.given;\nclass RestrictionsTest extends BaseApiConfiguration {\n@Test\nvoid shouldQueryCpfWithoutRestriction() {\ngiven()\n.pathParam(\"cpf\", \"1234567890\")\n.when()\n.get(\"/restrictions/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_NOT_FOUND);\n}\n}\n</code></pre>"},{"location":"rest-assured-basics/lab2/","title":"REST Assured Basics - Lab 2","text":"<p>In this, lab we will learn how to validate the response body.</p>"},{"location":"rest-assured-basics/lab2/#1-search-for-a-cpf-with-restriction","title":"1. Search for a CPF with restriction","text":""},{"location":"rest-assured-basics/lab2/#list-of-cpf-with-restrictions","title":"List of CPF with restrictions","text":"CPF 97093236014 60094146012 84809766080 62648716050 26276298085 01317496094 55856777050 55856777050 24094592008 58063164083"},{"location":"rest-assured-basics/lab2/#steps","title":"Steps","text":"<ol> <li>Create a new test method in the  <code>RestrictionsTest</code> class named <code>shouldReturnRestriction()</code></li> <li>Add the following to the test:</li> <li>pre-condition (<code>given()</code>) using a path parameter <code>pathParam</code> using<ul> <li>key: <code>cpf</code></li> <li>value: any from the List of CPF with restrictions</li> </ul> </li> <li>action (<code>when()</code>) to get (<code>get()</code>) the <code>/restrictions/{cpf}</code> endpoint</li> <li>assert (<code>then()</code>) in the status code expecting HTTP 200<ul> <li>tip: use <code>HttpStatus.SC_OK</code></li> <li>add a <code>body()</code> assertion in the response body attribute <code>message</code>, using <code>CoreMatchers.is()</code> to validate the message</li> </ul> </li> <li>Run the test</li> </ol>"},{"location":"rest-assured-basics/lab2/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>assertion in the <code>message</code> attribute  </li> </ul> </li> </ul>"},{"location":"rest-assured-basics/lab2/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldReturnRestriction() {\ngiven()\n.pathParam(\"cpf\", \"62648716050\")\n.when()\n.get(\"/restrictions/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_OK)\n.body(\"message\", CoreMatchers.is(\"CPF 62648716050 has a restriction\"));\n}   </code></pre>"},{"location":"rest-assured-basics/lab2/#2-understand-a-validation-exception","title":"2. Understand a validation exception","text":""},{"location":"rest-assured-basics/lab2/#steps_1","title":"Steps","text":"<ol> <li>In the <code>shouldReturnRestriction()</code> test, change the message inside the <code>CoreMatchers.is()</code> to force a validation error</li> <li>for example: remove the word <code>restrictions</code> from the assertion </li> <li>Run the test </li> </ol>"},{"location":"rest-assured-basics/lab2/#expected-result","title":"Expected result","text":"<ul> <li>Test will fail, returning the following exception <pre><code>java.lang.AssertionError: 1 expectation failed.\nJSON path message doesn't match.\nExpected: is \"CPF 62648716050 has a\"\n  Actual: CPF 62648716050 has a restriction\n</code></pre></li> </ul> <p>Request and response logged</p> <p>We added, in the <code>BaseApiConfiguration</code> a code that will log in the console the request and response when any validation fails. You will be able to see the request and response before the exception in the console.</p>"},{"location":"rest-assured-basics/lab3/","title":"REST Assured Basics - Lab 3","text":""},{"location":"rest-assured-basics/lab3/#1-create-the-package-to-add-the-restrictions-tests","title":"1. Create the package to add the restrictions tests","text":"<ol> <li>Create an additional package called <code>simulation</code> in <code>com.workshop</code> package in the <code>src/test/java</code> folder</li> </ol>"},{"location":"rest-assured-basics/lab3/#2-retrieve-all-records-from-the-simulation-api","title":"2. Retrieve all records from the Simulation API","text":""},{"location":"rest-assured-basics/lab3/#steps","title":"Steps","text":"<ol> <li>Create a Java class named <code>SimulationsTest</code> in <code>com.workshop.simulation</code> in the <code>src/test/java</code> folder</li> <li>Make <code>SimulationsTest</code> extends <code>BaseApiConfiguration</code></li> <li>Create a test method named <code>shouldRetrieveAllSimulations()</code></li> <li>Add the following to the test:<ul> <li>action (<code>when()</code>) to get (<code>get()</code>) the <code>/simulations/</code> endpoint</li> <li>assert (<code>then()</code>) in the status code expecting HTTP 200<ul> <li>tip: use <code>HttpStatus.SC_OK</code></li> <li>add a <code>body()</code> assertion in the response body for each attribute using <code>CoreMatchers.is()</code> to validate values returned</li> </ul> </li> </ul> </li> <li>Run the test </li> </ol> <p>Tips</p> <ul> <li>don't forget to set the array position <code>[0].</code></li> <li>for the <code>id</code> attribute use the <code>CoreMatchers.notNullValue()</code> assertion</li> <li>for the <code>amount</code> attribute, use the value as <code>BigDecimal</code></li> <li>example: <code>new BigDecimal(\"11000.00\")</code></li> </ul>"},{"location":"rest-assured-basics/lab3/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>assertion in all the attributes</li> </ul> </li> </ul>"},{"location":"rest-assured-basics/lab3/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldRetrieveAllSimulations() {\nwhen()\n.get(\"/simulations/\")\n.then()\n.statusCode(HttpStatus.SC_OK)\n.body(\"[0].id\", CoreMatchers.notNullValue())\n.body(\"[0].name\", CoreMatchers.is(\"Tom\"))\n.body(\"[0].cpf\", CoreMatchers.is(\"66414919004\"))\n.body(\"[0].email\", CoreMatchers.is(\"tom@gmail.com\"))\n.body(\"[0].amount\", CoreMatchers.is(new BigDecimal(\"11000.00\")))\n.body(\"[0].installments\", CoreMatchers.is(3))\n.body(\"[0].insurance\", CoreMatchers.is(true));\n}  </code></pre>"},{"location":"rest-assured-basics/lab3/#3-retrieve-all-records-and-assert-their-size","title":"3. Retrieve all records and assert their size","text":""},{"location":"rest-assured-basics/lab3/#steps_1","title":"Steps","text":"<ol> <li>In the <code>SimulationsTest</code> class, create a test method named <code>shouldRetrieveAllSimulationsCheckingSize()</code></li> <li>Add the same actions from the previous test, making a <code>GET</code> request to <code>/simulations/</code></li> <li>In the assertion, use <code>$</code> instead of an attribute name and use <code>Matchers.hasSize()</code> to assert the number of elements returned</li> <li>Run the test</li> </ol>"},{"location":"rest-assured-basics/lab3/#expected-results_1","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> <li>assertion in the array size</li> </ul> </li> </ul>"},{"location":"rest-assured-basics/lab3/#solution_1","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldRetrieveAllSimulationsCheckingSize() {\nwhen()\n.get(\"/simulations/\")\n.then()\n.statusCode(HttpStatus.SC_OK)\n.body(\"$\", Matchers.hasSize(2));\n} </code></pre>"},{"location":"rest-assured-basics/lab3/#4-using-soft-assertions","title":"4. Using soft assertions","text":""},{"location":"rest-assured-basics/lab3/#steps_2","title":"Steps","text":"<ol> <li>In the <code>SimulationsTest</code> class, modify the <code>shouldRetrieveAllSimulations()</code> to have the soft assertions approach</li> <li>Make a temporary change in the following attribute values </li> <li><code>name</code> to <code>Unknown</code></li> <li><code>installments</code> to <code>0</code></li> <li>Run the test</li> </ol>"},{"location":"rest-assured-basics/lab3/#expected-results_2","title":"Expected results","text":"<ul> <li>The test execution will fail with the following error in the console   <pre><code>java.lang.AssertionError: 2 expectations failed.\nJSON path [0].name doesn't match.\nExpected: is \"Unknown\"\n  Actual: Tom\n\nJSON path [0].installments doesn't match.\nExpected: is &lt;0&gt;\n  Actual: &lt;3&gt;\n</code></pre></li> <li>Rever the data changes</li> </ul>"},{"location":"rest-assured-basics/lab4/","title":"REST Assured Basics - Lab 4","text":""},{"location":"rest-assured-basics/lab4/#1-deleting-a-simulation","title":"1. Deleting a simulation","text":""},{"location":"rest-assured-basics/lab4/#steps","title":"Steps","text":"<ol> <li>In the <code>SimulationsTest</code> class, create a test method named <code>shouldDeleteExistingSimulation()</code></li> <li>Add a precondition (<code>given()</code>) and set the CPF to delete using the <code>pathParam()</code> method</li> <li>Add the action using the <code>delete()</code> method to <code>/simulations/{cpf}</code></li> <li>Add the assertion (<code>then()</code>) in the <code>statusCode</code> as <code>204 no content</code></li> <li>Run the test</li> </ol>"},{"location":"rest-assured-basics/lab4/#expected-results","title":"Expected results","text":"<ul> <li>Green test execution where the following verifications will be performed successfully<ul> <li>status code</li> </ul> </li> </ul>"},{"location":"rest-assured-basics/lab4/#solution","title":"Solution","text":"Click to see... <pre><code>@Test\nvoid shouldDeleteExistingSimulation() {\ngiven()\n.pathParam(\"cpf\", \"66414919004\")\n.when()\n.delete(\"/simulations/{cpf}\")\n.then()\n.statusCode(HttpStatus.SC_NO_CONTENT);\n}\n</code></pre>"},{"location":"setup/local-environment/","title":"Setup - Local environment","text":"<p>The first thing we need to do is to check the setup and download the necessary project to run the tests.</p>"},{"location":"setup/local-environment/#1-check-your-machine","title":"1. Check your machine","text":"<ul> <li> JDK 17 + installed</li> <li> Modern IDE (Intellij, VSCode, etc...)</li> <li> Git</li> </ul>"},{"location":"setup/local-environment/#2-using-the-backend-project","title":"2. Using the backend project","text":"<p>The backend project was created using SpringBoot 3 and an in-memory database. You access it at https://github.com/eliasnogueira/credit-api.</p> <p>You can use one of the following approaches to use the application:</p>"},{"location":"setup/local-environment/#jar-file","title":"JAR file","text":"<ol> <li>Open the project package session on GitHub: https://github.com/eliasnogueira/credit-api/packages/1742648</li> <li>In the Assets session, download the <code>.jar</code> file</li> <li>Open the Terminal and navigate to the folder the file was saved <pre><code>cd Downloads\n</code></pre></li> <li>Start the application by running the following: <pre><code>java -jar file-name.jar\n</code></pre></li> </ol>"},{"location":"setup/local-environment/#direct-project-usage","title":"Direct project usage","text":"<ol> <li>Clone the backend project running one of the following cloning methods:</li> </ol> HTTPS <pre><code>git clone https://github.com/eliasnogueira/credit-api.git\n</code></pre> SSH <pre><code>git clone git@github.com:eliasnogueira/credit-api.git\n</code></pre> GitHub CLI <pre><code>gh repo clone eliasnogueira/credit-api\n</code></pre> Download ZIP <p>https://github.com/eliasnogueira/credit-api/archive/refs/heads/main.zip</p> <ol> <li>Open the Terminal and navigate to the project directory</li> <li>Run the application <pre><code>./mvnw spring-boot:run\n</code></pre></li> </ol> <p>Running inside the IDE</p> <p>You can also run the <code>CreditApiApplication</code> class located at <code>src/main/java</code></p>"},{"location":"setup/local-environment/#3-access-the-openapi-specification","title":"3. Access the OpenAPI specification","text":"<p>We will know a little bit more about the API using the OpenAPI specification as it will also be the entry point to run exploratory checks before the test automation.</p> <ul> <li>Clone the backend project by running one of the following cloning methods:</li> </ul>  Open API page <p>http://localhost:8088/swagger-ui/index.html</p>"},{"location":"setup/project/","title":"Setup - Project","text":"<p>The setup consists in creating the test project. You can download it or create one using the necessary libraries.</p>"},{"location":"setup/project/#1-clone-or-download-the-base-project","title":"1. Clone or Download the base project","text":"<p>The base project already has all the libraries added.</p>"},{"location":"setup/project/#11-clone-the-project","title":"1.1 Clone the project","text":"<ol> <li>Open your Terminal</li> <li>Navigate to a known folder in your computer</li> <li>Run the following command to clone the project    <pre><code>git clone https://github.com/eliasnogueira/restassured-workshop-3h-test.git\n</code></pre></li> </ol>"},{"location":"setup/project/#12-optional-download","title":"1.2 [optional] Download","text":"<ol> <li>Click on the following link to download the project as a zip file</li> <li>https://github.com/eliasnogueira/restassured-workshop-3h-test/archive/refs/heads/main.zip</li> </ol>"},{"location":"setup/project/#2-create-a-new-project","title":"2. Create a new project","text":"<p>This is an optional step if you need to create the project yourself!</p> <ol> <li>Open your preferred IDE</li> <li>Create a new Java project:</li> <li>based on Maven</li> <li>named <code>credit-api-tests</code></li> <li>you can name any group, but I recommend you use <code>com.workshop</code></li> </ol>"},{"location":"setup/project/#21-adding-the-libraries","title":"2.1 Adding the libraries","text":"<p>We need to add the base dependencies to start creating the tests.</p> <ol> <li>Open the <code>pom.xml</code> file</li> <li>Add the <code>properties</code> section <pre><code>&lt;properties&gt;\n&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n&lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;\n&lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;\n&lt;maven-compiler-plugin.version&gt;3.10.1&lt;/maven-compiler-plugin.version&gt;\n&lt;wagon-maven-plugin.version&gt;2.0.2&lt;/wagon-maven-plugin.version&gt;\n&lt;openapi-generator-maven-plugin.version&gt;6.2.1&lt;/openapi-generator-maven-plugin.version&gt;\n&lt;junit.version&gt;5.9.2&lt;/junit.version&gt;\n&lt;rest-assured.version&gt;5.3.0&lt;/rest-assured.version&gt;\n&lt;assertj-core.version&gt;3.24.2&lt;/assertj-core.version&gt;\n&lt;datafaker.version&gt;1.7.0&lt;/datafaker.version&gt;\n&lt;lombok.version&gt;1.18.24&lt;/lombok.version&gt;\n&lt;jackson-databind.version&gt;2.14.1&lt;/jackson-databind.version&gt;\n&lt;swagger-annotations.version&gt;1.6.6&lt;/swagger-annotations.version&gt;\n&lt;javax.annotation-api&gt;1.3.2&lt;/javax.annotation-api&gt;\n&lt;jsr305.version&gt;3.0.2&lt;/jsr305.version&gt;\n&lt;jackson-datatype-jsr310.version&gt;2.14.1&lt;/jackson-datatype-jsr310.version&gt;\n&lt;jackson-databind-nullable.version&gt;0.2.4&lt;/jackson-databind-nullable.version&gt;\n&lt;/properties&gt;\n</code></pre></li> <li>Now add the <code>dependencies</code> section <pre><code>&lt;dependencies&gt;\n&lt;!-- Testing libraries --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n&lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n&lt;version&gt;${junit.version}&lt;/version&gt;\n&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;io.rest-assured&lt;/groupId&gt;\n&lt;artifactId&gt;rest-assured&lt;/artifactId&gt;\n&lt;version&gt;${rest-assured.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.assertj&lt;/groupId&gt;\n&lt;artifactId&gt;assertj-core&lt;/artifactId&gt;\n&lt;version&gt;${assertj-core.version}&lt;/version&gt;\n&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;net.datafaker&lt;/groupId&gt;\n&lt;artifactId&gt;datafaker&lt;/artifactId&gt;\n&lt;version&gt;${datafaker.version}&lt;/version&gt;\n&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;!-- Runtime libraries --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n&lt;artifactId&gt;lombok&lt;/artifactId&gt;\n&lt;version&gt;${lombok.version}&lt;/version&gt;\n&lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;!-- OpenAPI generation libraries --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n&lt;version&gt;${jackson-databind.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;io.swagger&lt;/groupId&gt;\n&lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;\n&lt;version&gt;${swagger-annotations.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;javax.annotation&lt;/groupId&gt;\n&lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;\n&lt;version&gt;${javax.annotation-api}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;com.google.code.findbugs&lt;/groupId&gt;\n&lt;artifactId&gt;jsr305&lt;/artifactId&gt;\n&lt;version&gt;${jsr305.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;\n&lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;\n&lt;version&gt;${jackson-datatype-jsr310.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n&lt;artifactId&gt;jackson-databind-nullable&lt;/artifactId&gt;\n&lt;version&gt;${jackson-databind-nullable.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre></li> <li>Finally, add the <code>build</code> section <pre><code>&lt;build&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n&lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;\n&lt;configuration&gt;\n&lt;source&gt;${maven.compiler.source}&lt;/source&gt;\n&lt;target&gt;${maven.compiler.target}&lt;/target&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n&lt;artifactId&gt;wagon-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;${wagon-maven-plugin.version}&lt;/version&gt;\n&lt;/plugin&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.openapitools&lt;/groupId&gt;\n&lt;artifactId&gt;openapi-generator-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;${openapi-generator-maven-plugin.version}&lt;/version&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre></li> </ol>"},{"location":"setup/project/#22-make-sure-you-have-the-following-project-structure","title":"2.2 Make sure you have the following project structure","text":"<p>You must have the following structure in your project: <pre><code>\u2500\u2500\u2500 src\n\u251c\u2500\u2500 main\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 java\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 com.workshop\n\u2514\u2500\u2500 test\n\u2502   \u2514\u2500\u2500java\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 com.workshop\n\u2514\u2500\u2500\u2500\u2500\u2500 resources\n</code></pre></p>"},{"location":"setup/project/#3-done","title":"3. Done!","text":""}]}